# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.support_email: '%env(SUPPORT_EMAIL)%'
    app.food_forum_enabled: '%env(bool:FOOD_FORUM_ENABLED)%'
    cache_adapter: cache.adapter.filesystem
    article_uploads: 'uploads/articles'
    article_uploads_url: '%env(SITE_URL)%/%article_uploads%'
    router.request_context.scheme: '%env(SITE_BASE_SCHEME)%'
    router.request_context.host: '%env(SITE_BASE_HOST)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        
        bind:
            $debug: '%kernel.debug%'
            Demontpx\ParsedownBundle\Parsedown: '@demontpx_parsedown.parsedown'

            League\Flysystem\FilesystemInterface $articlesFilesystem: '@oneup_flysystem.uploads_articles_filesystem'
#            App\Service\FileUploader $articleFileUploader: '@file_uploader.article'
#            App\Service\FileUploader $avatarFileUploader: '@file_uploader.avatar'
            

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
        
    App\EventListener\ExampleEventListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: 'onEventHappen' }
    
#    file_uploader.article: 
#        class: 'App\Service\FileUploader'
#        arguments:
#            League\Flysystem\FilesystemInterface $articlesFilesystem: '@oneup_flysystem.uploads_articles_filesystem'
#